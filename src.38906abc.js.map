{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","Promise","resolve","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","reject","map","user","result","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","ok","error","setTimeout","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAUA,MAAMA,EAAQC,GACLC,QAAQC,QAAQF,GAGnBG,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ;;ACnBjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIZ,QAAQ,CAACC,EAASY,KAK3BZ,EAJqBU,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,MAO7DC,EAASC,GAAgBb,QAAQc,MAAMD,GAW7CP,EAAgBH,EAAO,SAASD,KAAKU,GACrCN,EAAgBH,EAAO,OAAOD,KAAKU;;AC7BnC,MAAMG,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,GACf,IAAI1B,QAAQ,CAAC2B,EAAIC,KAChB9B,MAAAA,EAAQqB,EAA0B,IAAK,KAE7CU,WAAW,KACUP,KAAKE,SAAW,GAGjCG,EAAG,CAACD,EAAYI,GAAIhC,IAEpB8B,EAAMF,EAAYI,KAEnBhC,KAIDiC,EAAa,EAAED,EAAI3B,MACvBC,QAAQC,mBAAmByB,kBAAmB3B,QAG1C6B,EAAWF,IACf1B,QAAQ6B,qCAAqCH,+BAa/CL,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAO5B,KAAKyB,GAAYI,MAAMH,GAEhEP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAO5B,KAAKyB,GAAYI,MAAMH,GAEhEP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,KAAM5B,KAAKyB,GAAYI,MAAMH,GAE/DP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAO5B,KAAKyB,GAAYI,MAAMH;;ACxChE,aAJA,QAAA,oBAEA,QAAA,kBACA,QAAA,kBACA,QAAA","file":"src.38906abc.js","sourceRoot":"../src","sourcesContent":["// const delay = ms => {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       resolve(ms);\n//     }, ms);\n//   });\n// };\n\n// const delay = ms => Promise.resolve(ms);\n\nconst delay = ms => {\n  return Promise.resolve(ms);\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise((resolve, reject) => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n\n    resolve(updatedUsers);\n  });\n};\n\nconst result = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n//  toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(result);\ntoggleUserState(users, 'Lux').then(result);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((ok, error) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        ok([transaction.id, delay]);\n      } else {\n        error(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ([id, time]) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n/*  makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n  makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n  makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n  makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);*/\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","import './sass/main.scss';\n\nimport './js/task-1.js';\nimport './js/task-2.js';\nimport './js/task-3.js';\n"]}